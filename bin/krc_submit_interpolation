#!/home/jlaura/anaconda3/envs/krc/bin/python

import argparse
import json
import os
import shlex
import subprocess
import sys
import textwrap

import krc

submission_strings = {'slurm':textwrap.dedent("""\
                                              #!/bin/bash -l
                                              #SBATCH -n {}
                                              #SBATCH -t {}
                                              #SBATCH -o {}.log
                                              #SBATCH -e {}.log
                                              #SBATCH --mem-per-cpu 4500
                                              #SBATCH -p longall
                                              #SBATCH --exclude=neb[17-20],gpu1
                                              source /home/jlaura/anaconda3/etc/profile.d/conda.sh
                                              conda activate krc
                                              #source activate krc
                                              #module load mpi/openmpi-x86_64
                                              module load davinci
                                              export ISISROOT="/usgs/cpkgs/anaconda3_linux/envs/isis3.9.1"
                                              export ISIS3DATA="/usgs/cpkgs/isis3/data"
                                              {}"""),
                      'pbs':textwrap.dedent("""\
                                            #!/bin/bash
                                            #PBS -S /bin/bash
                                            #PBS -N 'ThemisTI_Processing'
                                            #PBS -V
                                            #PBS -l nodes={}:ppn={}
                                            #PBS -l walltime={}
                                            #PBS -o {}.log
                                            #PBS -e {}.log
                                            module load mpi/openmpi-x86_64
                                            module load davinci
                                            {}""")}

def parsearguments():
    """
    Render help and parse the command line arguments

    Parameters.path.dirname(__file__))
    ----------
    None

    Return
    ------
    args    (class instance)  An argparse class instance
    """

    parser = argparse.ArgumentParser()
    parser.add_argument('inputfile', help='Input JSON configuration file to execute the job')
    parser.add_argument('-w', '--walltime', default='02:00:00', dest='walltime', help='Walltime for the job on ths cluster')
    parser.add_argument('-n', '--nodes', default=1, type=int, dest='nnodes', help='The number of nodes to use for processing')
    parser.add_argument('-c', '--cores', default=12, type=int, dest='ncores', help='The number of cores to use per node')
    parser.add_argument('-f', '--filelist', default=None, dest='filelist', help='A list of files to process using the same input parameters')
    parser.add_argument('-m', '--manager', default='slurm', type=str, dest='manager', help='The manager to use for cluster submission.  Options: slurm (default), pbs')
    return parser.parse_args()

def validateinputs(parser):
    """
    Validates PATHs and inputs

    Parameters
    ----------
    parser      (instance) An instance of the parser class

    Returns
    -------
    None
    """

    if not os.path.exists(parser.inputfile):
        print("Unable to locate the input file at {}".format(parser.inlist) )
        sys.exit()
    return

def submitjobs(inputfile, walltime, nnodes, ncores, manager, subcmd='qsub'):
    """
    Parse a list of jobs and submit them using qsub

    Parameters
    ----------
    procq       (list) Jobs to iterate
    params      (dict) Parameters
    walltime    (str) The walltime to submit the job with.
    subcmd      (str) Submission command, e.g. qsub or msub

    Returns
    -------
    None
    """
    # Setup the command that is submitted to the mother process
    #command = '/home/jlaura/miniconda3/envs/krc/bin/mpirun -n {} --hostfile /home/jlaura/krc_application/bin/hostfile.lis /home/jlaura/krc_application/bin/interpolate_krc {} '.format(nnodes * ncores,
    #                                                            inputfile)

    interpscript = os.path.join(os.path.dirname(krc.__file__), 'interpolate_krc.py')
    command = 'mpirun -n {} /home/jlaura/anaconda3/envs/krc/bin/python {} {}'.format(ncores, interpscript, inputfile)

    # Set up the PBS script that manages the cluster
    logname = os.path.splitext(os.path.basename(inputfile))[0]
    logname = '{}_{}'.format(logname, nnodes * ncores)

    if manager == 'slurm':
        job_string = submission_strings['slurm'].format(ncores, walltime,
                                                        logname, logname,
                                                        command)
        process = subprocess.Popen(['sbatch'], stdin=subprocess.PIPE,
                stdout=subprocess.PIPE)

    elif manager == 'pbs':
        job_string = submission_strings['pbs'].format(nnodes, ncores,
                                                      walltime, logname,
                                                      logname, command)

    process.stdin.write(str.encode(job_string))

    out, err = process.communicate()
    if err:
        print(err)

    print(job_string)
    return

def main():
    parser = parsearguments()
    validateinputs(parser)
    if parser.filelist == None:
        submitjobs(parser.inputfile, parser.walltime, parser.nnodes, parser.ncores, parser.manager)
    else:
        with open(parser.filelist, 'r') as f:
            files = []
            for i in f.readlines():
                if i.startswith("#"):
                    continue
                if len(i.rstrip()) > 0:
                    files.append(i.rstrip())
        for f in files:
            with open(parser.inputfile, 'r') as js:
                inpf = json.load(js)
                inpf['images'] = f
            outf = os.path.basename(f).split('.')[0] + '_config.json'

            # Check here to see if the output already exists
            image_outpath = inpf['outpath']
            image_outname = os.path.splitext(os.path.basename(inpf['images'][0]))[0] + '_proj.tif'
            check_path = os.path.join(image_outpath, image_outname)
            if os.path.exists(check_path):
                print('Output {} already exists. Skipping job submission'.format(check_path))
            else:
                print('Submitting New Job')
                with open(outf, 'w') as js:
                    json.dump(inpf, js)

                submitjobs(os.path.abspath(outf), parser.walltime, parser.nnodes, parser.ncores, parser.manager)

if __name__ == '__main__':
    main()
